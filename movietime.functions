red=`tput setaf 1`
green=`tput setaf 2`
rst=`tput sgr0`

Compile () {
	echo "Compile()"
	cd src
	make && make clean
	cd ..
}

makeDirStructure () {
	echo "makeDirStructure()"
	mkdir -v Movie
	[ ! -d Movie/1D-densities ] && mkdir -v Movie/1D-densities
	[ ! -d Movie/2D-densities ] && mkdir -v Movie/2D-densities
	[ ! -d Movie/Params ] && mkdir -v Movie/Params
	[ ! -d Movie/Results ] && mkdir -v Movie/Results
	[ ! -d Movie/2D-images ] && mkdir -v Movie/2D-images
	[ ! -d Movie/1D-images ] && mkdir -v Movie/1D-images
}

setFileID () {
	echo "*************************************"
	echo "*** ${1}"
	echo "*************************************"
	ID=${1##*/}
	ID=${ID#*.}
	ID=${ID%.*}
}

genCurrent () {
	echo "genCurrent()"
	ln -sf ${1} djogger.dat
	./readwf-xy < density.settings
	RC=$?
	if [ $RC -eq 1 ]
	then
		echo
		echo
		echo "${red}FATAL ERROR${rst} during file read. File read aborted by user."
		echo
		echo
		exit 1
	fi
	if [ $RC -ne 0 ]
	then
		echo $RC
		echo
		echo "${red}FATAL ERROR${rst} during file read. Please check if you use the \
correct '${green}readmode${rst}' in '${green}density.settings${rst}'."
		echo
		echo
		exit 1
	fi
	mv den-1.dat Movie/1D-densities/den-1.${ID}.dat
	mv den-2.dat Movie/1D-densities/den-2.${ID}.dat
	mv density.res Movie/Results/density.${ID}.res
	head -n -1 current.dat > Movie/2D-densities/current.${ID}.dat
	rm current.dat djogger.dat
}

genParams () {
	echo "genParams()"
	ln -s ${1} djogger.dat
	./params < density.settings
	if [[ $MANUAL_DYNPARMS == "true" && $STATIC == "false" ]]
	then
		T=$(echo "$T0+$DT*$ID" | bc | sed 's/^\./0./')
		echo "time = $T" >> params.py
		echo "xcom = 0.0" >> params.py
		echo "ycom = 0.0" >> params.py
	fi
	if [[ $STATIC == "true" ]]
	then
		echo "time = 0" >> params.py
		echo "xcom = $XCM" >> params.py
		echo "ycom = $YCM" >> params.py
	fi
	mv params.py Movie/Params/params.${ID}.py
	rm djogger.dat
}

plotImagePy () {
	echo "plotImage()"
	ln -sv Movie/Params/params.${ID}.py params.py
	if [ -z ${PYTHON+x} ]
	then
		./plot.py Movie/2D-densities/current.${ID}.dat
	else
		$PYTHON plot.py Movie/2D-densities/current.${ID}.dat
	fi
	convert density.png -resize x1080 density.jpg
	convert density.jpg -crop 1506x1080+1+0 Movie/2D-images/den.${ID}.jpg
	rm density.png density.jpg params.py params.pyc
}

plot1DImage () {
	echo "plot1DImage()"
	while read xmax zmax ximp zimp vimp ekin t zcm
	do
		$GNUPLOT -e "INPUT='Movie/1D-densities/denz-${ID}.dat'; \
			xmax='${zmax}'; zimp='${zimp}'; t='${t}'" plot1Dden.gnu
	done < Movie/Params/param-${ID}.dat
	mv denz.png Movie/1D-images/denz-${ID}.png
}

compileMovie () {
	echo "compileMovie()"
	ffmpeg -r ${FPS} -f image2 -i Movie/2D-images/den.%04d.jpg -vcodec libx264 -preset \
		ultrafast -crf 18 -pix_fmt yuv420p Movie/movie-2D.mp4
# 	ffmpeg -r ${FPS} -f image2 -i Movie/1D-images/denz-%03d.png -vcodec libx264 -preset \
# 		ultrafast -crf 18 -pix_fmt yuv420p Movie/movie-1D.mp4
# 	ffmpeg -r ${FPS} -i Movie/2D-images/denxz-%03d.png -c:v qtrle -pix_fmt rgb24 \
# 		Movie/movie-lossless.mov
# 	ffmpeg -r ${FPS} -i Movie/2D-images/denxz-%03d.png -codec png Movie/movie-d.mov
}
